# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle to EC2

on:
  push:
    branches: [ "master" ]

env:
  S3_BUCKET_NAME: gwangbu
  RESOURCE_PATH: ./src/main/resources/application.yml
  DB_RESOURCE_PATH: ./src/main/resources/application-db.yml
  OAUTH_RESOURCE_PATH: ./src/main/resources/application-oauth.yml
  AWS_REGION: ap-northeast-2
  CODE_DEPLOY_APPLICATION_NAME: gwangbu-code-deploy
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: gwangbu-code-deploy

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set yaml file
        uses: microsoft/variable-substitution@v1
        with:
          files: ${{ env.RESOURCE_PATH }}
        env:
          jwt.secret: ${{ secrets.JWT_SECRET }}

      - name: Set yaml file for DB
        uses: microsoft/variable-substitution@v1
        with:
          files: ${{ env.DB_RESOURCE_PATH }}
        env:
          spring.datasource.url: ${{ secrets.MYSQL_DATABASE }}
          spring.datasource.username: ${{ secrets.MYSQL_USER }}
          spring.datasource.password: ${{ secrets.MYSQL_PASSWORD }}
          spring.data.redis.host: ${{ secrets.REDIS_HOST }}

      - name: Set yaml file for OAUTH2
        uses: microsoft/variable-substitution@v1
        with:
          files: ${{ env.OAUTH_RESOURCE_PATH }}
        env:
          spring.security.oauth2.client.registration.naver.client-secret: ${{ secrets.NAVER_CLIENT_SECRET }}
          spring.security.oauth2.client.registration.google.client-secret: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          spring.security.oauth2.client.registration.kakao.client-secret: ${{ secrets.KAKAO_CLIENT_SECRET }}
          spring.security.oauth2.client.registration.github.client-secret: ${{ secrets.CLIENT_SECRET_GITHUB }}

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

      - name: Build with Gradle Wrapper
        run: ./gradlew clean build
        shell: bash

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY_ID }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Docker build & push to prod
        if: contains(github.ref, 'master')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME}} -p ${{ secrets.DOCKER_SECRET}}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/oauth2 .
          docker push ${{ secrets.DOCKER_USERNAME }}/oauth2

      - name: Deploy to prod
        uses: appleboy/ssh-action@master
        id: deploy-prod
        if: contains(github.ref,'master')
        with:
          host: ${{ secrets.HOST_DEV }}
          username: ${{ secrets.HOST_USERNAME }}
          password: ${{ secrets.HOST_PASSWORD }}
          port: 22
          script: |
            sudo docker stop oauth2
            sudo docker rm oauth2
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/oauth2
            sudo docker run -d -p 8080:8080 --network login --name oauth2 ${{ secrets.DOCKER_USERNAME }}/oauth2
            sudo docker image prune -f
