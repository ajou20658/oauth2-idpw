# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle to EC2

on:
  push:
    branches: [ "master" ]

env:
  S3_BUCKET_NAME: gwangbu
  RESOURCE_PATH: ./src/main/resources/application.yml
  AWS_REGION: ap-northeast-2
  CODE_DEPLOY_APPLICATION_NAME: gwangbu-code-deploy
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: gwangbu-code-deploy

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Set yaml file
      uses: microsoft/variable-substitution@v1
      with:
        files: ${{ env.RESOURCE_PATH }}
      env:
        spring.secuity.oauth2.client.registration.google.client-secret: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        spring.secuity.oauth2.client.registration.naver.client-secret: ${{ secrets.NAVER_CLIENT_SECRET }}
        spring.secuity.oauth2.client.registration.kakao.client-secret: ${{ secrets.KAKAO_CLIENT_SECRET }}
        spring.secuity.oauth2.client.registration.github.client-secret: ${{ secrets.GITHUB_CLIENT_SECRET }}
        spring.datasource.password: ${{ secrets.MYSQL_PASSWORD }}
        jwt.secret: ${{ secrets.JWT_SECRET }}

      # Configure Gradle for optimal use in GiHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
      shell: bash

    - name: Build with Gradle Wrapper
      run: ./gradlew clean build
      shell: bash

#    - name: Make zip file
#      run: zip -r ./$GITHUB_SHA.zip .
#      shell: bash
#
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY_ID }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Add Github IP to AWS
      run: |
        aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
#
#    - name: Upload to S3
#      run: aws s3 cp --region ${{ env.AWS_REGION }} ./$GITHUB_SHA.zip s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip
#
#    - name: Code Deploy
#      run: |
#        aws deploy create-deployment \
#        --deployment-config-name CodeDeployDefault.AllAtOnce \
#        --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
#        --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
#        --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$GITHUB_SHA.zip

    - name: Docker build & push to prod
      if: contains(github.ref, 'master')
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME}} -p ${{ secrets.DOCKER_SECRET}}
        docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/oauth2 .
        docker push ${{ secrets.DOCKER_USERNAME }}/oauth2
#    - name: Configure AWS Credentials - AWS 보안 그룹 생성
#      uses: aws-actions/configure-aws-credentials@v1
#      with:
#        aws-access-keyid: ${{ se }}
#
    - name: Deploy to prod
      uses: appleboy/ssh-action@master
      id: deploy-prod
      if: contains(github.ref,'master')
      with:
        host: ${{ secrets.HOST_DEV }}
        username: ${{ secrets.HOST_USERNAME }}
        password: ${{ secrets.HOST_PASSWORD }}
        port: 22
        script: |
          sudo docker stop $(sudo docker ps -q) 2>/dev/null || true
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/oauth2
          sudo docker run -d -p 8080:8080 --network login ${{ secrets.DOCKER_USERNAME }}/oauth2
          sudo docker image prune -f
    - name: REMOVE Github IP FROM security group
      run: |
        aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32